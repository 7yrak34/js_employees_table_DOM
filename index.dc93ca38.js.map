{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,SAAS,EAAgB,CAAM,EAC7B,IAAI,EAAS,EAAO,OAAO,CAAC,IAAK,IAIjC,MAAO,CAFP,CAAA,EAAS,EAAO,OAAO,CAAC,IAAK,GAA7B,CAGF,CAEA,IAAM,EAAgB,OAChB,EAAY,SAAS,aAAa,CAAC,SACrC,EAAQ,EAAG,EAAU,IAAI,EACzB,EAAS,GAMb,SAAS,gBAAgB,CAAC,MAAM,OAAO,CAAC,SAAC,CAAA,CAAS,CAAlD,EACE,EAAQ,gBAAgB,CAAC,QAAS,WAChC,IAAM,EAAY,EAAQ,WAAW,CAAC,WAAW,EAE7C,CAAA,IAAW,EACb,GAAU,EAEV,EAAS,EAGX,EAAK,IAAI,CAAC,SAAC,CAAA,CAAM,CAAjB,EACE,IAAM,EAAS,EAAK,QAAQ,CAAC,EAAM,CAAC,WAAW,CACzC,EAAS,EAAK,QAAQ,CAAC,EAAM,CAAC,WAAW,QAE/C,AAAI,EAAO,UAAU,CAAC,KACb,EAAgB,GAAU,EAAgB,GAG5C,EAAO,aAAa,CAAC,EAC9B,GAEA,EAAU,SAAS,CAAG,GAElB,EAAO,QAAQ,CAAC,IAClB,EAAK,OAAO,GAGd,EAAK,OAAO,CAAC,SAAC,CAAd,EAAsB,OAAA,EAAU,MAAM,CAAC,E,EACzC,EACF,GAEA,IAAI,EAAc,CAAI,CAAC,EAAE,CAEzB,SAAS,EAAe,CAAG,EACzB,EAAI,gBAAgB,CAAC,QAAS,WAC5B,EAAY,SAAS,CAAC,MAAM,CAAC,UAC7B,EAAI,SAAS,CAAC,GAAG,CAAC,UAClB,EAAc,CAChB,EACF,CAEA,EAAK,OAA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nfunction convertToNumber(string) {\n    var result = string.replace(\"$\", \"\");\n    result = result.replace(\",\", \"\");\n    return +result;\n}\nvar REVERSE_ORDER = \"DESC\";\nvar tableBody = document.querySelector(\"tbody\");\nvar rows = _to_consumable_array(tableBody.rows);\nvar sortBy = \"\";\nfunction updateRows() {\n    rows = _to_consumable_array(tableBody.rows);\n}\ndocument.querySelectorAll(\"th\").forEach(function(rowHead, index) {\n    rowHead.addEventListener(\"click\", function() {\n        var newSortBy = rowHead.textContent.toLowerCase();\n        if (sortBy === newSortBy) sortBy += REVERSE_ORDER;\n        else sortBy = newSortBy;\n        rows.sort(function(row1, row2) {\n            var value1 = row1.children[index].textContent;\n            var value2 = row2.children[index].textContent;\n            if (value1.startsWith(\"$\")) return convertToNumber(value1) - convertToNumber(value2);\n            return value1.localeCompare(value2);\n        });\n        tableBody.innerHTML = \"\";\n        if (sortBy.includes(REVERSE_ORDER)) rows.reverse();\n        rows.forEach(function(row) {\n            return tableBody.append(row);\n        });\n    });\n});\nvar selectedRow = rows[0];\nfunction handleRowClick(row) {\n    row.addEventListener(\"click\", function() {\n        selectedRow.classList.remove(\"active\");\n        row.classList.add(\"active\");\n        selectedRow = row;\n    });\n}\nrows.forEach(function(row) {\n    return handleRowClick(row);\n});\ndocument.body.insertAdjacentHTML(\"beforeend\", '\\n  <form method=\"get\" class=\"new-employee-form\">\\n    <label>Name: <input data-qa=\"name\" name=\"name\" type=\"text\"></label>\\n    <label>Position: <input data-qa=\"position\" name=\"position\" type=\"text\"></label>\\n    <label>\\n      Office:\\n      <select data-qa=\"office\" name=\"office\">\\n        <option value=\"Tokyo\">Tokyo</option>\\n        <option value=\"Singapore\">Singapore</option>\\n        <option value=\"London\">London</option>\\n        <option value=\"New York\">New York</option>\\n        <option value=\"Edinburgh\">Edinburgh</option>\\n        <option value=\"San Francisco\">San Francisco</option>\\n      </select>\\n    </label>\\n    <label>\\n      Age:\\n\\n      <input\\n        data-qa=\"age\"\\n        name=\"age\"\\n        type=\"number\"\\n      >\\n    </label>\\n\\n    <label>\\n      Salary:\\n\\n      <input\\n        data-qa=\"salary\"\\n        name=\"salary\"\\n        type=\"number\"\\n      >\\n      </label>\\n\\n    <button type=\"submit\">Save to table</button>\\n  </form>\\n');\nvar newEmployeeForm = document.querySelector(\".new-employee-form\");\nvar inputName = newEmployeeForm.querySelector('input[name=\"name\"]');\nvar inputPosition = newEmployeeForm.querySelector('input[name=\"position\"]');\nvar inputAge = newEmployeeForm.querySelector('input[name=\"age\"]');\nvar inputSalary = newEmployeeForm.querySelector('input[name=\"salary\"]');\nvar selectOffice = newEmployeeForm.querySelector(\"select\");\nfunction clearForm() {\n    inputName.value = \"\";\n    inputAge.value = \"\";\n    inputPosition.value = \"\";\n    inputSalary.value = \"\";\n    selectOffice.value = selectOffice.options[0].value;\n}\nfunction isAllLetters(str) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = str[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var ch = _step.value;\n            if (ch.toLowerCase() === ch.toUpperCase()) return false;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return true;\n}\nfunction addNotification(message, isSuccess) {\n    var notification = document.createElement(\"div\");\n    var title = document.createElement(\"h2\");\n    var text = document.createElement(\"p\");\n    notification.setAttribute(\"data-qa\", \"notification\");\n    notification.classList.add(\"notification\");\n    title.classList.add(\"title\");\n    if (isSuccess) {\n        title.textContent = \"Success\";\n        notification.classList.add(\"success\");\n    } else {\n        title.textContent = \"Error\";\n        notification.classList.add(\"error\");\n    }\n    text.textContent = message;\n    notification.append(title, text);\n    document.body.append(notification);\n    setTimeout(function() {\n        return notification.remove();\n    }, 2500);\n}\nfunction convertToSalary(num) {\n    return \"$\".concat(Number(num).toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"));\n}\nfunction handleCellsClick(row) {\n    _to_consumable_array(row.children).forEach(function(cell) {\n        cell.addEventListener(\"dblclick\", function() {\n            var initialValue = cell.textContent;\n            var input = document.createElement(\"input\");\n            input.classList.add(\"cell-input\");\n            input.value = initialValue;\n            var newValue = input.value;\n            input.addEventListener(\"change\", function() {\n                return newValue = input.value;\n            });\n            cell.innerHTML = \"\";\n            cell.append(input);\n            input.focus();\n            var onValueChange = function() {\n                if (!newValue.trim().length) {\n                    input.remove();\n                    cell.textContent = initialValue;\n                } else {\n                    input.remove();\n                    cell.textContent = newValue;\n                }\n            };\n            input.addEventListener(\"blur\", onValueChange);\n            input.addEventListener(\"keydown\", function(e) {\n                if (e.key === \"Enter\") onValueChange();\n            });\n        });\n    });\n}\nrows.forEach(function(row) {\n    return handleCellsClick(row);\n});\nfunction addNewEmployee(param) {\n    var employeeName = param.employeeName, position = param.position, office = param.office, age = param.age, salary = param.salary;\n    tableBody.insertAdjacentHTML(\"beforeend\", \"\\n    <tr>\\n      <td>\".concat(employeeName, \"</td>\\n      <td>\").concat(position, \"</td>\\n      <td>\").concat(office, \"</td>\\n      <td>\").concat(age, \"</td>\\n      <td>\").concat(convertToSalary(salary), \"</td>\\n    </tr>\\n  \"));\n    updateRows();\n    handleRowClick(tableBody.lastElementChild);\n    handleCellsClick(tableBody.lastElementChild);\n    clearForm();\n}\nnewEmployeeForm.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    if (inputName.value.length < 4) {\n        addNotification(\"Name is too short!\", false);\n        return;\n    }\n    if (!isAllLetters(inputName.value)) {\n        addNotification(\"Name should include only letters!\", false);\n        return;\n    }\n    if (!inputPosition.value.trim()) {\n        addNotification(\"Please enter your position\", false);\n        return;\n    }\n    if (inputAge.value < 18 || inputAge.value > 90) {\n        addNotification(\"Please enter your age, age should be between 18 and 90\", false);\n        return;\n    }\n    if (!inputSalary.value.trim()) {\n        addNotification(\"Please enter your salary\", false);\n        return;\n    }\n    var newEmployee = {\n        employeeName: inputName.value,\n        position: inputPosition.value,\n        office: selectOffice.value,\n        age: inputAge.value,\n        salary: inputSalary.value\n    };\n    addNewEmployee(newEmployee);\n    addNotification(\"New employee was added\", true);\n});\n\n//# sourceMappingURL=index.dc93ca38.js.map\n","'use strict';\n\nfunction convertToNumber(string) {\n  let result = string.replace('$', '');\n\n  result = result.replace(',', '');\n\n  return +result;\n}\n\nconst REVERSE_ORDER = 'DESC';\nconst tableBody = document.querySelector('tbody');\nlet rows = [...tableBody.rows];\nlet sortBy = '';\n\nfunction updateRows() {\n  rows = [...tableBody.rows];\n}\n\ndocument.querySelectorAll('th').forEach((rowHead, index) => {\n  rowHead.addEventListener('click', () => {\n    const newSortBy = rowHead.textContent.toLowerCase();\n\n    if (sortBy === newSortBy) {\n      sortBy += REVERSE_ORDER;\n    } else {\n      sortBy = newSortBy;\n    }\n\n    rows.sort((row1, row2) => {\n      const value1 = row1.children[index].textContent;\n      const value2 = row2.children[index].textContent;\n\n      if (value1.startsWith('$')) {\n        return convertToNumber(value1) - convertToNumber(value2);\n      }\n\n      return value1.localeCompare(value2);\n    });\n\n    tableBody.innerHTML = '';\n\n    if (sortBy.includes(REVERSE_ORDER)) {\n      rows.reverse();\n    }\n\n    rows.forEach((row) => tableBody.append(row));\n  });\n});\n\nlet selectedRow = rows[0];\n\nfunction handleRowClick(row) {\n  row.addEventListener('click', () => {\n    selectedRow.classList.remove('active');\n    row.classList.add('active');\n    selectedRow = row;\n  });\n}\n\nrows.forEach((row) => handleRowClick(row));\n\ndocument.body.insertAdjacentHTML(\n  'beforeend',\n  `\n  <form method=\"get\" class=\"new-employee-form\">\n    <label>Name: <input data-qa=\"name\" name=\"name\" type=\"text\"></label>\n    <label>Position: <input data-qa=\"position\" name=\"position\" type=\"text\"></label>\n    <label>\n      Office:\n      <select data-qa=\"office\" name=\"office\">\n        <option value=\"Tokyo\">Tokyo</option>\n        <option value=\"Singapore\">Singapore</option>\n        <option value=\"London\">London</option>\n        <option value=\"New York\">New York</option>\n        <option value=\"Edinburgh\">Edinburgh</option>\n        <option value=\"San Francisco\">San Francisco</option>\n      </select>\n    </label>\n    <label>\n      Age:\n\n      <input\n        data-qa=\"age\"\n        name=\"age\"\n        type=\"number\"\n      >\n    </label>\n\n    <label>\n      Salary:\n\n      <input\n        data-qa=\"salary\"\n        name=\"salary\"\n        type=\"number\"\n      >\n      </label>\n\n    <button type=\"submit\">Save to table</button>\n  </form>\n`,\n);\n\nconst newEmployeeForm = document.querySelector('.new-employee-form');\nconst inputName = newEmployeeForm.querySelector('input[name=\"name\"]');\nconst inputPosition = newEmployeeForm.querySelector('input[name=\"position\"]');\nconst inputAge = newEmployeeForm.querySelector('input[name=\"age\"]');\nconst inputSalary = newEmployeeForm.querySelector('input[name=\"salary\"]');\nconst selectOffice = newEmployeeForm.querySelector('select');\n\nfunction clearForm() {\n  inputName.value = '';\n  inputAge.value = '';\n  inputPosition.value = '';\n  inputSalary.value = '';\n  selectOffice.value = selectOffice.options[0].value;\n}\n\nfunction isAllLetters(str) {\n  for (const ch of str) {\n    if (ch.toLowerCase() === ch.toUpperCase()) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction addNotification(message, isSuccess) {\n  const notification = document.createElement('div');\n  const title = document.createElement('h2');\n  const text = document.createElement('p');\n\n  notification.setAttribute('data-qa', 'notification');\n\n  notification.classList.add('notification');\n  title.classList.add('title');\n\n  if (isSuccess) {\n    title.textContent = 'Success';\n    notification.classList.add('success');\n  } else {\n    title.textContent = 'Error';\n    notification.classList.add('error');\n  }\n\n  text.textContent = message;\n\n  notification.append(title, text);\n  document.body.append(notification);\n\n  setTimeout(() => notification.remove(), 2500);\n}\n\nfunction convertToSalary(num) {\n  return `$${Number(num)\n    .toFixed(0)\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`;\n}\n\nfunction handleCellsClick(row) {\n  [...row.children].forEach((cell) => {\n    cell.addEventListener('dblclick', () => {\n      const initialValue = cell.textContent;\n      const input = document.createElement('input');\n\n      input.classList.add('cell-input');\n      input.value = initialValue;\n\n      let newValue = input.value;\n\n      input.addEventListener('change', () => (newValue = input.value));\n\n      cell.innerHTML = '';\n      cell.append(input);\n      input.focus();\n\n      const onValueChange = () => {\n        if (!newValue.trim().length) {\n          input.remove();\n          cell.textContent = initialValue;\n        } else {\n          input.remove();\n          cell.textContent = newValue;\n        }\n      };\n\n      input.addEventListener('blur', onValueChange);\n\n      input.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') {\n          onValueChange();\n        }\n      });\n    });\n  });\n}\n\nrows.forEach((row) => handleCellsClick(row));\n\nfunction addNewEmployee({ employeeName, position, office, age, salary }) {\n  tableBody.insertAdjacentHTML(\n    'beforeend',\n    `\n    <tr>\n      <td>${employeeName}</td>\n      <td>${position}</td>\n      <td>${office}</td>\n      <td>${age}</td>\n      <td>${convertToSalary(salary)}</td>\n    </tr>\n  `,\n  );\n\n  updateRows();\n  handleRowClick(tableBody.lastElementChild);\n  handleCellsClick(tableBody.lastElementChild);\n  clearForm();\n}\n\nnewEmployeeForm.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  if (inputName.value.length < 4) {\n    addNotification('Name is too short!', false);\n\n    return;\n  }\n\n  if (!isAllLetters(inputName.value)) {\n    addNotification('Name should include only letters!', false);\n\n    return;\n  }\n\n  if (!inputPosition.value.trim()) {\n    addNotification('Please enter your position', false);\n\n    return;\n  }\n\n  if (inputAge.value < 18 || inputAge.value > 90) {\n    addNotification(\n      'Please enter your age, age should be between 18 and 90',\n      false,\n    );\n\n    return;\n  }\n\n  if (!inputSalary.value.trim()) {\n    addNotification('Please enter your salary', false);\n\n    return;\n  }\n\n  const newEmployee = {\n    employeeName: inputName.value,\n    position: inputPosition.value,\n    office: selectOffice.value,\n    age: inputAge.value,\n    salary: inputSalary.value,\n  };\n\n  addNewEmployee(newEmployee);\n  addNotification('New employee was added', true);\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","convertToNumber","string","result","replace","REVERSE_ORDER","tableBody","document","querySelector","rows","sortBy","querySelectorAll","forEach","rowHead","index","addEventListener","newSortBy","textContent","toLowerCase","sort","row1","row2","value1","children","value2","startsWith","localeCompare","innerHTML","includes","reverse","row","append","selectedRow","handleRowClick","classList","remove","add","body","insertAdjacentHTML","newEmployeeForm","inputName","inputPosition","inputAge","inputSalary","selectOffice","addNotification","message","isSuccess","notification","createElement","title","text","setAttribute","setTimeout","handleCellsClick","cell","initialValue","input","value","newValue","focus","onValueChange","trim","e","key","param","employeeName","position","office","age","salary","preventDefault","isAllLetters","str","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","ch","toUpperCase","err","return","concat","Number","toFixed","lastElementChild","options"],"version":3,"file":"index.dc93ca38.js.map"}